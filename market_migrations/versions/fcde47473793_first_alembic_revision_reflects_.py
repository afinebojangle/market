"""first alembic revision, reflects exisiting db structure.

Revision ID: fcde47473793
Revises: 
Create Date: 2017-10-31 19:20:33.100786

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'fcde47473793'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('capm_coefficients',
    sa.Column('ticker', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('alpha', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('beta', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('ticker', name='capm_coefficients_pkey')
    )
    op.create_table('option_historical',
    sa.Column('ticker', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('experiation_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('strike', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('stock_price', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('years_to_expiration', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('call_volume', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('call_open_interest', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('put_volume', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('put_open_interest', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('call_bid_price', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('call_theoretical_value', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('call_ask_price', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('put_bid_price', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('put_theoretical_value', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('put_ask_price', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('call_bid_implied_volitility', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('call_mid_market_implied_volitility', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('call_ask_implied_volitility', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('smoothed_strike_implied_volitility', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('put_bid_implied_volitility', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('put_mid_market_implied_volitility', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('put_ask_implied_volitility', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('risk_free_interest_rate', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('dividend_rate', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('residual_rate_data', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('delta', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('gamma', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('theta', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('vega', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('rho', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('phi', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('driftless_theta', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('extended_volitility', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('extended_call_theoretical_price', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('extended_put_theoretical_price', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('trade_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('ticker', 'experiation_date', 'strike', 'trade_date', name='option_historical_pkey')
    )
    op.create_table('nasdaq_global_equity_index',
    sa.Column('date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('value', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('high', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('low', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('market_value', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('dividend_market_value', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('date', name='nasdaq_global_equity_index_pkey')
    )
    op.create_table('equity_returns',
    sa.Column('date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('ticker', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('nominal_return', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('percent_return', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('date', 'ticker', name='equity_returns_pkey')
    )
    op.create_table('equity_historical',
    sa.Column('ticker', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('open', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('high', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('low', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('close', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('volume', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('ex_dividend', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('split_ratio', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('adj_open', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('adj_high', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('adj_low', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('adj_close', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('adj_volume', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('ticker', 'date', name='equity_historical_pkey')
    )
    op.create_table('equity_errors',
    sa.Column('ticker', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('error', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('ticker', 'date', name='equity_errors_pkey')
    )
    op.create_table('nasdaq_global_equity_returns',
    sa.Column('date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('nominal_return', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('percent_return', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('date', name='nasdaq_global_equity_returns_pkey')
    )
    # ### end Alembic commands ###



def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('nasdaq_global_equity_returns')
    op.drop_table('equity_errors')
    op.drop_table('equity_historical')
    op.drop_table('equity_returns')
    op.drop_table('nasdaq_global_equity_index')
    op.drop_table('option_historical')
    op.drop_table('capm_coefficients')
    # ### end Alembic commands ###
    
    